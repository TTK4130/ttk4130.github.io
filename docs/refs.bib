@article{Sympy2017,
 title = {SymPy: symbolic computing in Python},
 author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \v{C}ert\'{i}k, Ond\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AMiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\v{c}ka, \v{S}t\v{e}p\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},
 year = 2017,
 month = jan,
 keywords = {Python, Computer algebra system, Symbolics},
 abstract = {
            SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.
         },
 volume = 3,
 pages = {e103},
 journal = {PeerJ Computer Science},
 issn = {2376-5992},
 url = {https://doi.org/10.7717/peerj-cs.103},
 doi = {10.7717/peerj-cs.103}
}

@misc{Egeland2002,
publisher = {Marine Cybernetics},
isbn = {8292356010},
year = {2002},
title = {Modeling and simulation for automatic control},
language = {eng},
address = {Trondheim},
author = {Egeland, Olav},
keywords = {Simulering;Automatisk regulering-- Modellering og simulering;Automatisk regulering;automatisk;kontrollteknikk;regulering;modellering;simulering;pensum;ttk4130;Systemteori},
}

@misc{Fossen2021,
abstract = {"Handbook of Marine Craft Hydrodynamics and Motion Control is an extensive study of the latest research in hydrodynamics, guidance, navigation, and control systems for marine craft. The text establishes how the implementation of mathematical models and modern control theory can be used for simulation and verification of control systems, decision-support systems, and situational awareness systems. Coverage includes hydrodynamic models for marine craft, models for wind, waves and ocean currents, dynamics and stability of marine craft, advanced guidance principles, sensor fusion, and inertial navigation. This important book includes the latest tools for analysis and design of advanced GNC systems and presents new material on unmanned underwater vehicles, surface craft, and autonomous vehicles. References and examples are included to enable engineers to analyze existing projects before making their own designs, as well as MATLAB scripts for hands-on software development and testing. Hig hlights of this Second Edition include: ? Topical case studies and worked examples demonstrating how you can apply modeling and control design techniques to your own designs ? A Github repository with MATLAB scripts (MSS toolbox) compatible with the latest software releases from Mathworks ? New content on mathematical modeling, including models for ships and underwater vehicles, hydrostatics, and control forces and moments ? New methods for guidance and navigation, including line-of-sight (LOS) guidance laws for path following, sensory systems, model-based navigation systems, and inertial navigation systems This fully revised Second Edition includes innovative research in hydrodynamics and GNC systems for marine craft, from ships to autonomous vehicles operating on the surface and under water. Handbook of Marine Craft Hydrodynamics and Motion Control is a must-have for students and engineers working with unmanned systems, field robots, autonomous vehicles, and ships. MSS toolbox: https ://github.com/cybergalactic/mss Lecture notes: https://www.fossen.biz/wiley Author?s home page: https://www.fossen.biz"--},
publisher = {Wiley},
isbn = {9781119575054},
year = {2021},
title = {Handbook of marine craft hydrodynamics and motion control},
edition = {2. utg.},
language = {eng},
address = {Hoboken, NJ},
author = {Fossen, Thor I},
keywords = {Skipshydrodynamikk;Marine konstruksjoner $x dynamiske forhold;Ships-- Hydrodynamics;Stability of ships;Motion control devices;Automatic pilot (Ships);Steering-gear;Ships-- Electronic equipment;pensum;TTK 4190},
lccn = {2021007896},
}

@misc{gros2011,
	title = {Modelling and Simulation: Lecture notes for the {NTNU}/{ITK} course {TTK4130}},
	language = {en},
	year = {2011},
	author = {Gros, Sebastien},
}

@misc{lect2024,
	title = {Lecture notes in {TTK4130} {Modelling and Simulation}},
	language = {en},
	year = {2025},
	author = {Rokseth, Børge and
            Gros, Sebastien}
}

@online{moore2022,
  author = {Moore, Jason K.},
  title = {Learn Multibody Dynamics},
  year = {2022},
  url = {https://moorepants.github.io/learn-multibody-dynamics/},
  urldate = {2024-11-29}
}

@misc{ginsberg1997,
  author = {Ginsberg, J. H.},
  title = {Advanced Engineering Dynamics},
  year = {1997},
  doi = {10.1016/b978-0-340-64571-0.x5000-0}
}

@book{sensorbook,
    author = {Edmund Brekke},
    title = {Fundamentals of Sensor Fusion - Target tracking, navigation and SLAM},
    year = {2024},
    edition = {5},
    publisher = {Not published},
    language = {english}
}

@online{calculus_openstax_2016,
  author = {OpenStax},
  year = {2016},
  title = {4.9: {{Newton}}'s {{Method}}},
  shorttitle = {4.9},
  date = {2016-07-11T02:58:14Z},
  url = {https://math.libretexts.org/Bookshelves/Calculus/Calculus_(OpenStax)/04%3A_Applications_of_Derivatives/4.09%3A_Newtons_Method},
  urldate = {2025-03-19},
  abstract = {In many areas of pure and applied mathematics, we are interested in finding solutions to an equation of the form  f(x)=0.  For most functions, however, it is difficult\&mdash;if not impossible\&mdash;…},
  langid = {english},
  organization = {Mathematics LibreTexts}
}

@online{newtons_method_wikipedia_2025,
  author = {Wikipedia},
  year = {2025},
  title = {Newton's Method},
  booktitle = {Wikipedia},
  date = {2025-03-06T19:20:15Z},
  url = {https://en.wikipedia.org/w/index.php?title=Newton%27s_method&oldid=1279135928},
  urldate = {2025-03-19},
  abstract = {In numerical analysis, the Newton-Raphson method, also known simply as Newton's method, named after Isaac Newton and Joseph Raphson, is a root-finding algorithm which produces successively better approximations to the roots (or zeroes) of a real-valued function. The most basic version starts with a real-valued function  f, its derivative f′, and an initial guess x0 for a root of f. If f satisfies certain assumptions and the initial guess is close, then                                   x                        1                             =                    x                        0                             −                                                f               (                                x                                    0                                               )                                                          f                 ′                              (                                x                                    0                                               )                                                  \{\textbackslash displaystyle x\_\{1\}=x\_\{0\}-\{\textbackslash frac \{f(x\_\{0\})\}\{f'(x\_\{0\})\}\}\}    is a better approximation of the root than x0. Geometrically, (x1, 0) is the x-intercept of the tangent of the graph of f at (x0, f(x0)): that is, the improved guess, x1, is the unique root of the linear approximation of f  at the initial guess, x0. The process is repeated as                                   x                        n             +             1                             =                    x                        n                             −                                                f               (                                x                                    n                                               )                                                          f                 ′                              (                                x                                    n                                               )                                                  \{\textbackslash displaystyle x\_\{n+1\}=x\_\{n\}-\{\textbackslash frac \{f(x\_\{n\})\}\{f'(x\_\{n\})\}\}\}    until a sufficiently precise value is reached. The number of correct digits roughly doubles with each step. This algorithm is first in the class of Householder's methods, and was succeeded by Halley's method. The method can also be extended to complex functions and to systems of equations.},
  langid = {english},
  annotation = {Page Version ID: 1279135928}
}

@misc{sola2017,
  title = {Quaternion Kinematics for the Error-State {{Kalman}} Filter},
  author = {Sol{\`a}, Joan},
  year = {2017},
  month = nov,
  number = {arXiv:1711.02508},
  eprint = {1711.02508},
  primaryclass = {cs},
  publisher = {arXiv},
  urldate = {2024-11-10},
  abstract = {This article is an exhaustive revision of concepts and formulas related to quaternions and rotations in 3D space, and their proper use in estimation engines such as the error-state Kalman filter.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Robotics},
  file = {/Users/tordnatlandsmyr/Zotero/storage/YF95JD2D/Solà - 2017 - Quaternion kinematics for the error-state Kalman f.pdf}
}
